# app.py

# --- 1. Importar bibliotecas ---
import streamlit as st
import os
# Importa as fun√ß√µes que lidam com a IA do arquivo ia_service.py
from ia_service import initialize_gemini_chat, get_ai_response

# --- 2. Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(page_title="Assistente VivaCare", layout="wide")

# --- 3. T√≠tulo e Descri√ß√£o na Interface ---
st.title("Assistente VivaCare üíö")
st.markdown("""
Bem-vindo(a) ao Assistente VivaCare.
Sou um chatbot desenvolvido para fornecer informa√ß√µes gerais e acess√≠veis sobre transplante de √≥rg√£os.
**Lembre-se: Eu sou uma intelig√™ncia artificial. As informa√ß√µes que forne√ßo s√£o gerais e n√£o substituem a consulta e o acompanhamento de um profissional de sa√∫de. Sempre consulte seu m√©dico ou equipe de transplante.**
""")

# --- 4. Inicializa√ß√£o da Sess√£o de Chat da IA e Hist√≥rico da Conversa (Usando st.session_state) ---
# st.session_state permite manter o estado das vari√°veis entre as intera√ß√µes do Streamlit
if 'chat_session' not in st.session_state:
    # Se a sess√£o de chat da IA ainda n√£o existe, inicializa-a
    st.session_state['chat_session'] = initialize_gemini_chat()
    # Adiciona uma mensagem inicial do assistente ao hist√≥rico (opcional)
    if st.session_state['chat_session']:
         st.session_state.setdefault('messages', []).append({"role": "assistant", "content": "Ol√°! Eu sou o Assistente TransplantCare. Como posso te ajudar hoje?"})
    else:
         st.session_state.setdefault('messages', []).append({"role": "assistant", "content": "Ol√°! N√£o consegui inicializar o assistente de IA. Por favor, verifique a configura√ß√£o da API Key e reinicie o aplicativo."})


if 'messages' not in st.session_state:
    # Se o hist√≥rico de mensagens n√£o existe, cria uma lista vazia
    st.session_state['messages'] = []
# Adaptei o formato do hist√≥rico para lista de dicion√°rios para usar st.chat_message

# --- 5. Exibindo o Hist√≥rico da Conversa na Interface ---
# Itera sobre a lista de mensagens armazenadas no estado da sess√£o
for message in st.session_state['messages']:
    # Usa st.chat_message para formatar as mensagens como um chat visualmente
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# --- 6. Entrada do Usu√°rio (Caixa de Texto no Rodap√©) ---
# st.chat_input cria uma barra de input fixa na parte inferior
prompt = st.chat_input("Digite sua mensagem aqui:")

# --- 7. L√≥gica para Processar a Entrada do Usu√°rio (Quando o usu√°rio envia uma mensagem) ---
# Este bloco √© executado quando o usu√°rio digita algo na caixa de input e aperta Enter
if prompt:
    # 1. Adiciona a mensagem do usu√°rio ao hist√≥rico no estado da sess√£o
    st.session_state['messages'].append({"role": "user", "content": prompt})

    # 2. Exibe a mensagem do usu√°rio imediatamente na interface
    with st.chat_message("user"):
        st.markdown(prompt)

    # 3. Obt√©m a resposta da IA chamando a fun√ß√£o do servi√ßo de IA
    # Passa a sess√£o de chat da IA e a mensagem do usu√°rio
    ia_response = get_ai_response(st.session_state['chat_session'], prompt)

    # 4. Adiciona a resposta da IA ao hist√≥rico no estado da sess√£o
    st.session_state['messages'].append({"role": "assistant", "content": ia_response})

    # 5. Exibe a resposta da IA na interface
    with st.chat_message("assistant"):
        st.markdown(ia_response)

    # Nota: Com st.chat_input e st.chat_message, o Streamlit geralmente
    # gerencia a re-execu√ß√£o e atualiza√ß√£o da interface automaticamente ap√≥s este bloco.
    # st.experimental_rerun() # Raramente necess√°rio aqui, mas pode ser usado se a interface n√£o atualizar como esperado